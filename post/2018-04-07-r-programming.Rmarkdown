---
title: R Programming
author: jonthelaion
date: '2018-04-25 18:00:00'
slug: r-programming
categories:
  - R
  - coursera
  - mooc
tags:
  - R
  - coursera
  - mooc
---

# R Basics

R has five basic/atomic classes of objects:

- character
- numeric (real numbers)
- integer
- complex
- logical (True/False)

R objects have attributes and can be accessed by using the `attributes()` function.

**Numerics** are generally treated as double precision real numbers.

**Integers** are obtained by specifying the `L` suffix (e.g. `1L`).

There is also a special number `Inf` which represents infinity and `NaN` represents an undefined value.

# Vectors

**Vectors** can be created with either `vector()` or `c()`.

```{r}
# c() is commonly used to create vectors.
print(v1 <- c(1,2,3))
```

```{r}
# vector() function can be used to initialise vectors.
print(v2 <- vector("numeric", length = 10))
```

- A vector can only contain objects of the same class.
- If different classes are mixed together, they will be coerced so that every element is the same class.
- Explicit coercion can be fored by using the `as.*()` functions (e.g. `as.character()`).

# Matrices

**Matrices** are vectors with a dimension attribute that are constructed column-wise by default.

```{r}
print(m1 <- matrix(1:6, nrow=2, ncol=3))
print(dim(m1))
print(attributes(m1))
```

Matrices can also be created directly from vectors by adding a dimension attribute.

```{r}
m2 <- 1:10
dim(m2) <- c(2,5)
m2
```

Matrices can also be created by using `cbind()` and `rbind()`.

```{r}
x <- 1:3
y <- 10:12
cbind(x,y)
rbind(x,y)
```

# Lists

**Lists** can contain different class types.

```{r}
print(l1 <- list(1, 'a', TRUE, 1+4i))
```

# Factors

- Factors are used to represent cateogrical data.
- Factors can be unordered or ordered.
- One can think of a factor as an integer vector where each integer has a label.
- Factors are treaded specially by modelling functions like `lm()` and `glm()`.
- The order of the levels can be set using the levels argument to `factor()`. This can be important in linear modelling because the first level is used as the baseline level.
- Using gactors with labels is better than using integers because factors are self-describing; having a variable that has values `'Male'` and `'Female'` is better than a variable that has values `1` or `2`.

```{r}
x <- factor(c("Yes","Yes","No","Yes","No"))
x
table(x)
unclass(x)
levels(x)
```

# Missing Values

- Missing values are denoted by `NA` or `NaN` for undefined mathematical operations.
- `is.na()` is used to test objects if they are `NA`.
- `is.nan()` is used to test for `NaN`.

# User-Defined Functions

```{r}
# myfunction <- function(argument1, argument2, ...){
#     statements
#     return(object)
# }
```

```{r}
hypotenuse <- function(a, b){
    hyp <- sqrt(a^2 + b^2)
    return(hyp)
}

hypotenuse(3, 4)
```

